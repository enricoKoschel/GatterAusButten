package com.partnerundpartner;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.HashMap;
import java.util.Locale;

public class PreGameGUI extends JFrame {
	private JPanel mainPanel;
	private JLabel lblTitle;

	private JLabel lblDifficulty;
	private JComboBox<String> cbxDifficulty;

	private JLabel lblSize;
	private JSpinner spnPlayFieldSize;

	private JLabel lblAgain;
	private JCheckBox chkAgain;

	private JLabel lblForceRatio;
	private JCheckBox chkForceRatio;

	private JLabel lblWindowSize;
	private JSpinner spnWindowSize;

	private JLabel lbl3Long;
	private JSpinner spn3Long;

	private JLabel lbl2Long;
	private JSpinner spn2Long;

	private JLabel lbl1Long;
	private JSpinner spn1Long;

	private JButton btnStartGame;

	private boolean gameStarted;
	public final Object lock = new Object();

	public PreGameGUI(String title) {
		super(title);

		$$$setupUI$$$();
		setResizable(false);
		setContentPane(mainPanel);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		pack();

		//Component listeners
		btnStartGame.addActionListener(e -> {
			//Signal to main() that the game has started
			synchronized (lock) {
				gameStarted = true;
				lock.notifyAll();
			}

			//Close the window
			setVisible(false);
			dispose();
		});
	}

	private void createUIComponents() {
		spnPlayFieldSize = new JSpinner(new SpinnerNumberModel(7, 1, 26, 1));

		spnWindowSize = new JSpinner(new SpinnerNumberModel(1280, 250, null, 1));

		spn3Long = new JSpinner(new SpinnerNumberModel(2, 0, null, 1));
		spn2Long = new JSpinner(new SpinnerNumberModel(2, 0, null, 1));
		spn1Long = new JSpinner(new SpinnerNumberModel(3, 0, null, 1));

		cbxDifficulty = new JComboBox<>(new String[]{"Einfach", "Normal", "Schwer", "Unmöglich"});
		cbxDifficulty.setSelectedIndex(2);
	}

	public boolean isGameStarted() {
		return gameStarted;
	}

	public GameSettings getSelectedSettings() {
		return new GameSettings(getSelectedWindowSize(), getSelectedForceRatio(),
				getSelectedPlayFieldSize(), getSelectedDifficulty(), getSelectedTurnOrder(), getSelectedShipAmounts());
	}

	private AI.Difficulty getSelectedDifficulty() {
		switch (cbxDifficulty.getSelectedIndex()) {
			case 0:
				return AI.Difficulty.Easy;
			case 1:
				return AI.Difficulty.Medium;
			case 2:
				return AI.Difficulty.Hard;
			case 3:
				return AI.Difficulty.Impossible;
		}

		throw new IllegalStateException("Invalid difficulty selected!");
	}

	private int getSelectedPlayFieldSize() {
		return (int)spnPlayFieldSize.getValue();
	}

	private boolean getSelectedTurnOrder() {
		return chkAgain.isSelected();
	}

	private boolean getSelectedForceRatio() {
		return chkForceRatio.isSelected();
	}

	private int getSelectedWindowSize() {
		return (int)spnWindowSize.getValue();
	}

	private HashMap<Integer, Integer> getSelectedShipAmounts() {
		HashMap<Integer, Integer> shipAmounts = new HashMap<>();

		shipAmounts.put(1, (int)spn1Long.getValue());
		shipAmounts.put(2, (int)spn2Long.getValue());
		shipAmounts.put(3, (int)spn3Long.getValue());

		return shipAmounts;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(12, 2, new Insets(0, 0, 0, 0), -1, -1));
		lblTitle = new JLabel();
		Font lblTitleFont = this.$$$getFont$$$(null, -1, 30, lblTitle.getFont());
		if (lblTitleFont != null) lblTitle.setFont(lblTitleFont);
		lblTitle.setHorizontalAlignment(0);
		lblTitle.setHorizontalTextPosition(0);
		lblTitle.setText("Einstellungen");
		mainPanel.add(lblTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(177, 53), null, 0, false));
		lblDifficulty = new JLabel();
		lblDifficulty.setText("KI Schwierigkeit");
		mainPanel.add(lblDifficulty, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		btnStartGame = new JButton();
		btnStartGame.setText("Spiel starten");
		mainPanel.add(btnStartGame, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lblAgain = new JLabel();
		lblAgain.setText("Nach Treffer nochmal");
		mainPanel.add(lblAgain, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		chkAgain = new JCheckBox();
		chkAgain.setText("");
		mainPanel.add(chkAgain, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mainPanel.add(cbxDifficulty, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mainPanel.add(spnWindowSize, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lblWindowSize = new JLabel();
		lblWindowSize.setText("Fensterbreite (Mindestens 250)");
		mainPanel.add(lblWindowSize, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lblForceRatio = new JLabel();
		lblForceRatio.setText("16:9 Seitenverhältniss erzwingen");
		mainPanel.add(lblForceRatio, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		chkForceRatio = new JCheckBox();
		chkForceRatio.setSelected(true);
		chkForceRatio.setText("");
		mainPanel.add(chkForceRatio, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lblSize = new JLabel();
		lblSize.setText("Spielfeld Größe (1-26)");
		mainPanel.add(lblSize, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mainPanel.add(spnPlayFieldSize, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lbl3Long = new JLabel();
		lbl3Long.setText("Anzahl dreier Schiffe");
		mainPanel.add(lbl3Long, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lbl2Long = new JLabel();
		lbl2Long.setText("Anzahl zweier Schiffe");
		mainPanel.add(lbl2Long, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lbl1Long = new JLabel();
		lbl1Long.setText("Anzahl einer Schiffe");
		mainPanel.add(lbl1Long, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mainPanel.add(spn3Long, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mainPanel.add(spn2Long, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mainPanel.add(spn1Long, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JSeparator separator1 = new JSeparator();
		mainPanel.add(separator1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JSeparator separator2 = new JSeparator();
		mainPanel.add(separator2, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JSeparator separator3 = new JSeparator();
		mainPanel.add(separator3, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JSeparator separator4 = new JSeparator();
		mainPanel.add(separator4, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
		boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
		Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
		return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}
}